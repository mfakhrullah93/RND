// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: protos/invoicing-service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InvoicingService_CreateInvoice_FullMethodName  = "/invoicing.InvoicingService/CreateInvoice"
	InvoicingService_GetInvoice_FullMethodName     = "/invoicing.InvoicingService/GetInvoice"
	InvoicingService_ReceivePayment_FullMethodName = "/invoicing.InvoicingService/ReceivePayment"
)

// InvoicingServiceClient is the client API for InvoicingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the InvoicingService
type InvoicingServiceClient interface {
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
	ReceivePayment(ctx context.Context, in *ReceivePaymentRequest, opts ...grpc.CallOption) (*ReceivePaymentResponse, error)
}

type invoicingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicingServiceClient(cc grpc.ClientConnInterface) InvoicingServiceClient {
	return &invoicingServiceClient{cc}
}

func (c *invoicingServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoicingService_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicingServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoicingService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicingServiceClient) ReceivePayment(ctx context.Context, in *ReceivePaymentRequest, opts ...grpc.CallOption) (*ReceivePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceivePaymentResponse)
	err := c.cc.Invoke(ctx, InvoicingService_ReceivePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoicingServiceServer is the server API for InvoicingService service.
// All implementations must embed UnimplementedInvoicingServiceServer
// for forward compatibility
//
// Define the InvoicingService
type InvoicingServiceServer interface {
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	ReceivePayment(context.Context, *ReceivePaymentRequest) (*ReceivePaymentResponse, error)
	mustEmbedUnimplementedInvoicingServiceServer()
}

// UnimplementedInvoicingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvoicingServiceServer struct {
}

func (UnimplementedInvoicingServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedInvoicingServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedInvoicingServiceServer) ReceivePayment(context.Context, *ReceivePaymentRequest) (*ReceivePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePayment not implemented")
}
func (UnimplementedInvoicingServiceServer) mustEmbedUnimplementedInvoicingServiceServer() {}

// UnsafeInvoicingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoicingServiceServer will
// result in compilation errors.
type UnsafeInvoicingServiceServer interface {
	mustEmbedUnimplementedInvoicingServiceServer()
}

func RegisterInvoicingServiceServer(s grpc.ServiceRegistrar, srv InvoicingServiceServer) {
	s.RegisterService(&InvoicingService_ServiceDesc, srv)
}

func _InvoicingService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicingService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicingService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicingService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicingService_ReceivePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingServiceServer).ReceivePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoicingService_ReceivePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingServiceServer).ReceivePayment(ctx, req.(*ReceivePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoicingService_ServiceDesc is the grpc.ServiceDesc for InvoicingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoicingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoicing.InvoicingService",
	HandlerType: (*InvoicingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _InvoicingService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _InvoicingService_GetInvoice_Handler,
		},
		{
			MethodName: "ReceivePayment",
			Handler:    _InvoicingService_ReceivePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/invoicing-service.proto",
}
