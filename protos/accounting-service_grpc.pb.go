// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: protos/accounting-service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AccountingService_CreateLedgerEntry_FullMethodName = "/accounting.AccountingService/CreateLedgerEntry"
	AccountingService_GetLedgerEntry_FullMethodName    = "/accounting.AccountingService/GetLedgerEntry"
	AccountingService_UpdateLedgerEntry_FullMethodName = "/accounting.AccountingService/UpdateLedgerEntry"
	AccountingService_ListLedgerEntries_FullMethodName = "/accounting.AccountingService/ListLedgerEntries"
)

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingServiceClient interface {
	CreateLedgerEntry(ctx context.Context, in *CreateLedgerEntryRequest, opts ...grpc.CallOption) (*CreateLedgerEntryResponse, error)
	GetLedgerEntry(ctx context.Context, in *GetLedgerEntryRequest, opts ...grpc.CallOption) (*GetLedgerEntryResponse, error)
	UpdateLedgerEntry(ctx context.Context, in *UpdateLedgerEntryRequest, opts ...grpc.CallOption) (*UpdateLedgerEntryResponse, error)
	ListLedgerEntries(ctx context.Context, in *ListLedgerEntriesRequest, opts ...grpc.CallOption) (*ListLedgerEntriesResponse, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) CreateLedgerEntry(ctx context.Context, in *CreateLedgerEntryRequest, opts ...grpc.CallOption) (*CreateLedgerEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLedgerEntryResponse)
	err := c.cc.Invoke(ctx, AccountingService_CreateLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetLedgerEntry(ctx context.Context, in *GetLedgerEntryRequest, opts ...grpc.CallOption) (*GetLedgerEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLedgerEntryResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) UpdateLedgerEntry(ctx context.Context, in *UpdateLedgerEntryRequest, opts ...grpc.CallOption) (*UpdateLedgerEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLedgerEntryResponse)
	err := c.cc.Invoke(ctx, AccountingService_UpdateLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ListLedgerEntries(ctx context.Context, in *ListLedgerEntriesRequest, opts ...grpc.CallOption) (*ListLedgerEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLedgerEntriesResponse)
	err := c.cc.Invoke(ctx, AccountingService_ListLedgerEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility
type AccountingServiceServer interface {
	CreateLedgerEntry(context.Context, *CreateLedgerEntryRequest) (*CreateLedgerEntryResponse, error)
	GetLedgerEntry(context.Context, *GetLedgerEntryRequest) (*GetLedgerEntryResponse, error)
	UpdateLedgerEntry(context.Context, *UpdateLedgerEntryRequest) (*UpdateLedgerEntryResponse, error)
	ListLedgerEntries(context.Context, *ListLedgerEntriesRequest) (*ListLedgerEntriesResponse, error)
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServiceServer struct {
}

func (UnimplementedAccountingServiceServer) CreateLedgerEntry(context.Context, *CreateLedgerEntryRequest) (*CreateLedgerEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedgerEntry not implemented")
}
func (UnimplementedAccountingServiceServer) GetLedgerEntry(context.Context, *GetLedgerEntryRequest) (*GetLedgerEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerEntry not implemented")
}
func (UnimplementedAccountingServiceServer) UpdateLedgerEntry(context.Context, *UpdateLedgerEntryRequest) (*UpdateLedgerEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLedgerEntry not implemented")
}
func (UnimplementedAccountingServiceServer) ListLedgerEntries(context.Context, *ListLedgerEntriesRequest) (*ListLedgerEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLedgerEntries not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_CreateLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CreateLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CreateLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CreateLedgerEntry(ctx, req.(*CreateLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetLedgerEntry(ctx, req.(*GetLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_UpdateLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).UpdateLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_UpdateLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).UpdateLedgerEntry(ctx, req.(*UpdateLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ListLedgerEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLedgerEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ListLedgerEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ListLedgerEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ListLedgerEntries(ctx, req.(*ListLedgerEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLedgerEntry",
			Handler:    _AccountingService_CreateLedgerEntry_Handler,
		},
		{
			MethodName: "GetLedgerEntry",
			Handler:    _AccountingService_GetLedgerEntry_Handler,
		},
		{
			MethodName: "UpdateLedgerEntry",
			Handler:    _AccountingService_UpdateLedgerEntry_Handler,
		},
		{
			MethodName: "ListLedgerEntries",
			Handler:    _AccountingService_ListLedgerEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/accounting-service.proto",
}
